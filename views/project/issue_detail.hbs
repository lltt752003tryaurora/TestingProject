{{#> modal }}
{{/modal}}

<main class="d-flex h-100 overflow-hidden">
  {{>sidebar}}
  <div id="content" class="h-100 overflow-auto p-4" style="width: 80%; ">
    <div class="container-fluid m-2">
      <!-- Header -->
      <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">
          <a href=".." style="text-decoration: none; color: inherit;">Issues</a>
          /
          <a href="#" style="text-decoration: none; color: inherit;">{{issueId}}</a>
        </h1>

        <button id="btn-track" type="button" class="btn btn-primary" data-toggle="modal">
          Track issue <i class="fa fa-bell"></i>
        </button>
      </div>

      <!-- Main content -->

      <!-- Content Row: Comments -->
      <div id="comments-container" class="row my-2">

      </div>

      <!-- Content Row -->
      <div class="row mx-auto">
        <div class="container">
          <form id="comment-form" class="container">
            <div class="mb-3">
              <label for="comment" class="form-label">Update issue status:</label>
              <textarea class="form-control" id="comment" name="comment" rows="3"></textarea>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
          </form>
          <div id="message" class="mt-3"></div>
        </div>
      </div>
    </div>
  </div>
</main>

<script>
  const trackBtn = document.getElementById("btn-track");
  let tracked = false;
  trackBtn.addEventListener("click", () => {
    if (tracked === false) {
      trackBtn.innerText = "Untrack issue";
      trackBtn.classList.replace("btn-primary", "btn-secondary");
    } else if (tracked === true) {
      trackBtn.innerHTML = "Track issue <i class='fa fa-bell'></i>";
      trackBtn.classList.replace("btn-secondary", "btn-primary");
    }
    tracked = !tracked;
  })
</script>

<!-- Load comments scripts -->
<script>
  const displayComments = async (comments) => {
    const issueId = {{ issueId }};
    const container = document.getElementById("comments-container");

    container.innerText = "";

    // Container wrapper
    const wrapper = document.createElement("div");
    wrapper.classList.add("container");
    container.appendChild(wrapper);

    if (comments.length === 0) {
      wrapper.innerHTML = "<div class='container text-center'><i>No comments for this issue yet. You can post your comment, or track this issue for updates.</i></div>";
      return;
    }

    // Issue title
    const issueTitle = document.createElement("h2");
    issueTitle.classList.add("h4");
    issueTitle.innerText = `Comments on issue ${issueId}`;
    wrapper.appendChild(issueTitle);

    comments.forEach(async (comment) => {
      // Fetch comment's owner info
      const userId = comment.userId;
      const userResponse = await axios.get(`/api/users/${userId}`);
      const {user} = userResponse.data;
      console.log(user);

      // Comment container = header + content
      const cmtContainer = document.createElement("div");
      cmtContainer.classList.add("container", "border", "border-dark", "rounded-lg", "my-4", "py-4");
      wrapper.appendChild(cmtContainer);
      
      // Comment header = left + right
      const cmtHeader = document.createElement("div");
      cmtHeader.classList.add("d-flex", "flex-row", "justify-content-between", "align-items-center");
      cmtContainer.appendChild(cmtHeader);

      // Comment header left
      const cmtHeaderLeft = document.createElement("div");
      cmtHeaderLeft.classList.add("d-flex", "flex-row");
      cmtHeader.appendChild(cmtHeaderLeft);

      // Comment header left avatar
      const userAvatar = document.createElement("img");
      userAvatar.src = user.avatar;
      userAvatar.style = "max-height: 40px;";
      userAvatar.classList.add("rounded-circle", "mx-2");
      cmtHeaderLeft.appendChild(userAvatar);

      // Comment header left info
      const cmtInfo = document.createElement("div");
      const username = user.username;
      const createAt = new Date(comment.createdAt);
      cmtInfo.innerHTML = `<div>${username}</div><div>${createAt}</div>`;
      cmtHeaderLeft.appendChild(cmtInfo);

      // Comment header right
      const cmtHeaderRight = document.createElement("div");
      cmtHeaderRight.classList.add("d-flex", "flex-row");
      cmtHeader.appendChild(cmtHeaderRight);

      // Comment body
      const cmtBody = document.createElement("div");
      cmtBody.classList.add("p-2");
      cmtContainer.appendChild(cmtBody);

      // Comment content
      const cmtContent = document.createElement("p");
      cmtContent.innerText = comment.comment;
      cmtBody.appendChild(cmtContent);
    });
  }

  const issueId = {{ issueId }};
  axios.get(`/api/issues/${issueId}/comments`)
    .then((response) => {
      const { comments } = response.data;
      console.log(comments);
      displayComments(comments);
    })
    .catch((err) => {
      console.log(error);
    });
</script>

{{!-- <script src="/js/comment/comments.js"></script>
<script>
  displayComments("{{issueId}}");
</script>

<!-- Post comment scripts -->
<script>
  document.getElementById("comment-form").addEventListener("submit", function(event) {
    event.preventDefault();

    const comment = document.getElementById("comment").value.trim();

    if (comment === "") {
      showMessage("Comment must not be empty.", "text-danger");
      return;
    }

    clearCommentField();
    addComment(comment);
    showMessage("Comment submitted successfully.", "text-success");
  });

  const showMessage = (message, className) => {
    const messageElement = document.getElementById("message");
    messageElement.textContent = message;
    messageElement.className = className;
  }

  const clearCommentField = () => {
    document.getElementById("comment").value = "";
  }
</script> --}}