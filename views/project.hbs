{{#> modal }}
<div class="d-flex flex-column p-4 gap-4">
  <div class="d-flex align-items-center justify-content-between">
    <div class="fw-semibold text-gray fs-3">
      Create new Project
    </div>
    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
  </div>

  
  <form id="create-project-form" class="needs-validation" onsubmit="return createProject(event)" novalidate>
    <div class="mb-3">
      <label for="name" class="form-label text-gray">Project Name</label>
      <input type="text" class="form-control" id="name" placeholder="Foobar" required>
      <div class="invalid-feedback">
        Please provide a valid name (Maximum 50 characters)
      </div>
    </div>
    {{!-- <div class="mb-3">
      <label for="description" class="form-label text-gray">Project Description</label>
      <textarea class="form-control" id="description" rows="5" placeholder="Something about this requirement..."></textarea>
    </div> --}}
    <div class="d-flex align-items-center justify-content-center gap-3">
      <button type="submit" class="btn btn-primary">Create</button>
      <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
    </div>
  </form>
  
</div>
{{/modal}}

<main class="d-flex h-100 overflow-hidden">
	<div id="content" class="h-100 overflow-auto p-4" style="width: 100%; ">
		<div class="text-gray fw-semibold fs-4">
			My Projects
		</div>
		<div class="d-flex justify-content-end py-3">
			<div class="d-flex gap-1">
				<div class="input-group">
					<input type="text" class="rounded-pill form-control" id="search" placeholder="Search" oninput="searchOnInput()"/>
					<label for="search" class="position-absolute end-0 pe-2 me-0 d-flex align-items-center h-100" style="z-index: 1000;">
						<img src="/assets/search.png" height="20px"/>
					</label>
				</div>
				<div class="btn-group">
					<button class="btn p-0 border-0" data-bs-toggle="dropdown">
						<img src="/assets/filter.png" height="30px" />
					</button>
					<div class="dropdown-menu dropdown-menu-right">
						<button class="dropdown-item" onclick="currentFilter = ''; loadProject(1)">All</button>
						<button class="dropdown-item" onclick="currentFilter = 'manager'; loadProject(1)">Manager</button>
						<button class="dropdown-item" onclick="currentFilter = 'tester'; loadProject(1)">Tester</button>
						<button class="dropdown-item" onclick="currentFilter = 'developer'; loadProject(1)">Developer</button>
					</div>
				</div>
				{{!-- <button class="btn p-0">
					<img src="/assets/sort.png" height="30px" />
				</button> --}}
			</div>
		</div>
		<div class="d-grid gap-2 project-grid-cols-1 sm:project-grid-cols-2 md:project-grid-cols-4" id="projects">
			<button class="btn bg-white rounded bottom-shadow d-flex flex-column align-items-center justify-content-center" data-bs-toggle="modal" data-bs-target="#modal" style="height: 200px;">
				<div class="">
					<img src="/assets/create_project.png" height="80px" />
				</div>
				<div class="fw-bold fs-4" style="color: #C3CAD9;">
					New Project
				</div>
			</button>
		</div>
		<div class="d-flex justify-content-end align-items-center text-gray mt-4 mr-2 gap-1">
			<button class="btn p-0" id="previousPage">
				<i class="bi bi-chevron-left h4 m-0"></i>
			</button>
			<div class="d-flex gap-1" id="pagination">
				
			</div>
			<button class="btn p-0" id="nextPage">
				<i class="bi bi-chevron-right h4 m-0"></i>
			</button>
		</div>
	</div>
</main>

{{!-- Template --}}
{{{{rawHelper}}}}
<script id="template-pagination" type="text/x-handlebars-template">
	{{#each pages}}
	<button class="btn p-0" onclick="{{onclick}}">
		<div class="d-flex rounded-circle {{#if currentPage}}bg-simple-gray{{/if}} justify-content-center align-items-center" style="width: 40px; height: 40px;">
			<span class="lh-1 h6 m-0">
				{{text}}
			</span>
		</div>
	</button>
	{{/each}}
</script>
{{{{/rawHelper}}}}

{{{{rawHelper}}}}
<script id="template-project" type="text/x-handlebars-template">
	{{#each projects}}
    <a href="/project/{{id}}/" class="col text-decoration-none bg-white rounded bottom-shadow" style="height: 200px;">
		<div class="d-flex flex-column p-4 justify-content-between h-100">
			<div class="d-flex justify-content-between align-items-center">
				<div class="text-gray fw-bold fs-5">
					{{name}}
				</div>
				<button class="btn p-0" onclick="">
					<img src="/assets/more_x.png" height="30px"/>
				</button>
			</div>
			<div class="d-flex align-items-center justify-content-between">
				<div class="d-flex flex-column lh-1">
					<div class="text-secondary fs-6">
						Tests
					</div>
					<div class="text-gray fw-bold">
						{{casesCount}}
					</div>
				</div>
				<div class="d-flex flex-column lh-1">
					<div class="text-secondary fs-6">
						Runs
					</div>
					<div class="text-gray fw-bold">
						{{runsCount}}
					</div>
				</div>
				<div class="d-flex flex-column lh-1">
					<div class="text-secondary fs-6">
						Issues
					</div>
					<div class="text-gray fw-bold">
						{{issueCount}}
					</div>
				</div>
			</div>
			<div class="d-flex justify-content-between">
				<div class="d-flex flex-column lh-1">
					<div class="text-secondary fs-6">
						My Role
					</div>
					<div class="text-gray fw-bold">
						{{role}}
					</div>
				</div>
				<div class="d-flex flex-column lh-1">
					<div class="text-secondary fs-6">
						Users
					</div>
					<div class="text-gray fw-bold">
						{{userCount}}
					</div>
				</div>
			</div>
		</div>
	</a>
	{{/each}}
</script>
{{{{/rawHelper}}}}

<script>
let template_project = Handlebars.compile(document.getElementById('template-project').innerHTML);
let template_pagination = Handlebars.compile(document.getElementById('template-pagination').innerHTML);
let currentPage = parseInt(getUrlQuery('page')) || 1;

let currentFilter = ''
let currentSearch = ''

function clearProject() {
	document.getElementById('projects').replaceChildren(document.getElementById('projects').firstElementChild)
	document.getElementById('pagination').innerHTML = '';
}

function searchOnInput() {
	let keyword = document.getElementById('search').value;
	currentSearch = keyword;
	loadProject(1);
}

function makePagination(numPage, currentPage) {
	let opts = [];

	let start = currentPage - 2;
	let end = currentPage + 2;

	if (start < 1) {
		start = 1
		end = Math.min(numPage, 5)
	}
	else if (end > numPage) {
		end = numPage
		start = Math.max(1, numPage - 4)
	}
	
	for (let i = start; i <= end; i++) {
		opts.push({
			text: i,
			onclick: `loadProject(${i})`,
			currentPage: currentPage == i
		})
	}

	let html = template_pagination({
		currentPage: currentPage,
		pages: opts
	})
	document.getElementById('pagination').innerHTML = html;
	document.getElementById('previousPage').onclick = currentPage == 1 ? null : () => {loadProject(currentPage - 1)};
	document.getElementById('nextPage').onclick = currentPage == numPage ? null : () => {loadProject(currentPage + 1)};
}

function loadProject(page = 1, size = 7) {
	axiosAPI.get('/api/projects', {
		params: {
			page: page,
			size: size,
			filter: currentFilter,
			search: currentSearch,
		}
	})
	.then(res => {
		clearProject();
		setUrlQuery('page', page)
		res.data.projects.forEach(pj => {
			pj.time = dayjs(pj.updatedAt).format('DD/MM/YYYY');
			let rolePriority = {
				"manager": 10,
				"tester": 5,
				"developer": 1,
				"none": 0,
			}
			pj.role = "none";
			pj.members.forEach(mb => {
				let newRole = mb.role;
				let currentPriority = rolePriority[pj.role];
				let newPriority = rolePriority[newRole];
				if (newPriority > currentPriority)
					pj.role = newRole;
			})
			pj.role = pj.role.charAt(0).toUpperCase() + pj.role.slice(1);
			if (pj.members.length > 1)
				pj.role += `, ${pj.members.length - 1}+`
		})
		let html = template_project({
			name: 'test',
			projects: res.data.projects
		})
		document.getElementById('projects').innerHTML += html;
		makePagination(res.data.numPage, page);
	})
	.catch(err => {
		console.log(err);
	})
}

loadProject(currentPage);

function createProject(e) {
	e.preventDefault()
	e.stopPropagation()

	var name = document.getElementById('name');
	var description = document.getElementById('description');

	var myModalEl = document.getElementById('modal');
	var modal = bootstrap.Modal.getInstance(myModalEl);

	if (!name.value.trim() || name.value.length > 50) {
		name.setCustomValidity('invalid');
		//document.querySelector('#name + .invalid-feedback').textContent = 'Passwords must match and be at least 8 characters long.';
	} else {
		name.setCustomValidity('');
	}

	var form = document.getElementById('create-project-form');
	if (!form.checkValidity()) {
		form.classList.add('was-validated');
		return;
	}
	form.classList.remove('was-validated');

	axiosAPI.put('/api/projects', {
		name: name.value,
	})
	.then(res => {
		console.log(res);
		Toastify({
			text: "New project created",
			style: {
			background: "linear-gradient(to right, #198754, #198754)",
			},
			onClick: function(){} // Callback after click
		}).showToast();
		modal.hide();
		setTimeout(() => {
			window.location.reload();
		}, 500);
	})
	.catch(err => {
		console.log(err);
		Toastify({
			text: "Failed to create project",
			style: {
			background: "linear-gradient(to right, #dc3545, #dc3545)",
			},
			onClick: function(){} // Callback after click
		}).showToast();
	})
}

</script>