{{#> modal }}
<div class="d-flex flex-column p-4 gap-4">
  <div class="d-flex align-items-center justify-content-between">
    <div class="fw-semibold text-gray fs-3">
      Create new Module
    </div>
    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
  </div>

  
  <form id="create-module-form" class="needs-validation" onsubmit="return createModule(event)" novalidate>
    <div class="mb-3">
      <label for="name" class="form-label text-gray">Module Name</label>
      <input type="text" class="form-control" id="name" placeholder="Foobar" required>
      <div class="invalid-feedback">
        Please provide a valid name.
      </div>
    </div>
    {{!-- <div class="mb-3">
      <label for="description" class="form-label text-gray">Module Description</label>
      <textarea class="form-control" id="description" rows="5" placeholder="Something about this requirement..."></textarea>
    </div> --}}
    <div class="d-flex align-items-center justify-content-center gap-3">
      <button type="submit" class="btn btn-primary">Create</button>
      <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
    </div>
  </form>
  
</div>
{{/modal}}

<main class="d-flex h-100 overflow-hidden">
  {{>sidebar}}
  <div id="content" class="h-100 overflow-auto p-4" style="width: 80%; ">
    <button type="button" class="btn btn-success d-flex align-items-center" data-bs-toggle="modal" data-bs-target="#modal">
      <img src="/assets/add.png" alt="#" height="30px">
      <div>Add Modules</div>
    </button>

    <div class="d-flex justify-content-between py-3">
      {{!-- <div class="d-flex gap-1">
        <button class="btn p-0">
          <img src="/assets/view_grid.png" height="30px" />
        </button>
        <button class="btn p-0">
          <img src="/assets/view_details.png" height="30px" />
        </button>
      </div>
      <div class="d-flex gap-1">
        <div class="input-group">
          <input type="text" class="rounded-pill form-control" id="search" placeholder="Search"/>
          <label for="search" class="position-absolute end-0 pe-2 me-0 d-flex align-items-center h-100" style="z-index: 1000;">
            <img src="/assets/search.png" height="20px"/>
          </label>
        </div>
        <button class="btn p-0">
          <img src="/assets/filter.png" height="30px" />
        </button>
        <button class="btn p-0">
          <img src="/assets/sort.png" height="30px" />
        </button>
      </div> --}}
    </div>

    <div id="modules" class="d-flex flex-column gap-2">
      
    </div>

  </div>
</main>

<script>
function resolveChild(modules, child) {
  let tree = [];
  child.forEach(ch => {
    let m = modules.filter(m => m.id == ch.id)[0];
    tree.push({
      name: m.name,
      child: resolveChild(modules, m.childModules)
    })
  })
  return tree;
}

function buildTree(modules) {
  let tree = [];
  modules.forEach(m => {
    if (m.parentModuleId == null) {
      tree.push({
        id: m.id,
        name: m.name,
        child: resolveChild(modules, m.childModules)
      })
    }
  })
  return tree;
}

function loadModules() {
  axiosAPI.get('/api/projects/{{projectId}}/modules')
  .then(res => {
    let tree = buildTree(res.data.modules);
    console.log(tree)
    renderModules(tree);
  })
  .catch(err => {
    console.log(err);
    if (err.response.data.message == 'Access denied.') {
      alert("Your role isn't allowed to view this page")
      window.location.replace("/project/{{projectId}}/");
    }
  })
}

loadModules();

function createModule(e) {
	e.preventDefault()
	e.stopPropagation()
	var form = document.getElementById('create-module-form');
	if (!form.checkValidity()) {
		form.classList.add('was-validated')
		return;
	}
	form.classList.remove('was-validated')

	var myModalEl = document.getElementById('modal');
	var modal = bootstrap.Modal.getInstance(myModalEl);
	
	var name = document.getElementById('name');

	axiosAPI.put('/api/projects/{{projectId}}/modules', {
		name: name.value,
	})
	.then(res => {
		console.log(res);
		Toastify({
			text: "New module created",
			style: {
			background: "linear-gradient(to right, #198754, #198754)",
			},
			onClick: function(){} // Callback after click
		}).showToast();
		modal.hide();
		setTimeout(() => {
			window.location.reload();
		}, 500);
	})
	.catch(err => {
		console.log(err);
		Toastify({
			text: "Failed to create module",
			style: {
			background: "linear-gradient(to right, #dc3545, #dc3545)",
			},
			onClick: function(){} // Callback after click
		}).showToast();
	})

	//Clear form
	name.value = "";
}

function deleteModule(e, id) {
  e.preventDefault()
  e.stopPropagation();
  if (confirm("Do you want to delete this module?") == true) {
    axiosAPI.delete('/api/projects/{{projectId}}/modules/' + id)
    .then(res => {
      console.log(res);
      Toastify({
        text: "Deleted",
        style: {
        background: "linear-gradient(to right, #198754, #198754)",
        },
        onClick: function(){} // Callback after click
      }).showToast();
      setTimeout(() => {
        window.location.reload();
      }, 500);
    })
    .catch(err => {
      console.log(err);
      Toastify({
        text: "Failed to delete module",
        style: {
        background: "linear-gradient(to right, #dc3545, #dc3545)",
        },
        onClick: function(){} // Callback after click
      }).showToast();
    })
  }
}

function isEmpty(obj) {
	for (const prop in obj) {
		if (Object.hasOwn(obj, prop)) {
			return false;
		}
	}
  
	return true;
}

function toggleArrowShape(self) {
	var arrowEl = self.getElementsByClassName('arrow')[0];
	if (arrowEl.classList.contains('childless'))
		return;
	if (arrowEl.classList.contains('expanded')) {
		arrowEl.src = '/assets/arrow_down.png';
		arrowEl.classList.remove('expanded');
	}
	else {
		arrowEl.src = '/assets/arrow_right.png';
		arrowEl.classList.add('expanded');
	}
}

function renderSubmodule(submodule, parentStr, rootElement, level) {
  submodule.forEach(sm => {
    var hasNoChildren = !sm.child.length;// isEmpty(submodule[key]);
		var newParent = parentStr + sm.name;
		var newEl = `
		<div class="${level > 0 ? 'collapse' : ''}" id="${parentStr}" onclick="toggleArrowShape(this);">
      <div class="d-flex align-items-center justify-content-between" data-bs-toggle="collapse" data-bs-target="${hasNoChildren ? '' : '#' + newParent}">
        <button class="btn p-0 d-flex align-items-center gap-2 w-100">
          ${'<img src="/assets/arrow_none.png" height="20px" />'.repeat(level)}
          <img class="arrow ${hasNoChildren ? 'childless' : ''}" src="${hasNoChildren ? '/assets/arrow_none.png' : '/assets/arrow_down.png'}" height="20px" />
          <img src="/assets/folder.png" height="30px" />
          <div class="text-gray fw-semibold">${sm.name}</div>
        </button>
        <button class="btn p-0" onclick="deleteModule(event, ${sm.id})">
          <img src="/assets/trash.png" height="20px" />
        </button>
      </div>
		</div>
		`
		rootElement.innerHTML += newEl;

		if (!hasNoChildren) {
			renderSubmodule(sm.child, newParent, rootElement, level + 1);
		}
  })
}

function renderModules(tree) {
	var modulesDiv = document.getElementById('modules');

	renderSubmodule(tree, '', modulesDiv, 0);
}
</script>
