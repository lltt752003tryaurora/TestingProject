<main class="w-100 h-100 d-flex align-items-center justify-content-center landing-bg">
  <form class="w-50 d-flex flex-column gap-2 needs-validation" novalidate>
    <div class="form-group">
      <label for="fullname">Full Name</label>
      <input type="text" class="form-control my-2" id="fullname" placeholder="Enter your full name" required>
      <div class="invalid-feedback">
        Please enter your full name.
      </div>
    </div>
	<div class="form-group">
      <label for="username">Username</label>
      <input type="text" class="form-control my-2" id="username" placeholder="Enter username" required>
      <div class="invalid-feedback">
        Please enter your username.
      </div>
    </div>
    <div class="form-group">
      <label for="password">Password</label>
      <input type="password" class="form-control my-2" id="password" placeholder="Password" required>
      <div class="invalid-feedback">
        Please enter your password.
      </div>
    </div>
    <div class="form-group">
      <label for="passwordConfirm">Confirm Password</label>
      <input type="password" class="form-control my-2" id="passwordConfirm" placeholder="Password" required>
      <div class="invalid-feedback">
        Password does not match!
      </div>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
  </form>
</main>
<script>
// Example starter JavaScript for disabling form submissions if there are invalid fields
(function() {
  'use strict';
  window.addEventListener('load', function() {
    // Fetch all the forms we want to apply custom Bootstrap validation styles to
    var forms = document.getElementsByClassName('needs-validation');
    // Loop over them and prevent submission
    var validation = Array.prototype.filter.call(forms, function(form) {
      form.addEventListener('submit', function(event) {
        event.preventDefault();
        event.stopPropagation();
        // Check if the password fields match
        if (document.getElementById('password').value != document.getElementById('passwordConfirm').value) {
          document.getElementById('passwordConfirm').setCustomValidity('invalid');
        } else {
          document.getElementById('passwordConfirm').setCustomValidity('');
        }
        // Check if the username is empty or contains spaces
        const username = document.getElementById('username').value;
        if (!username.trim() || username.includes(' ')) {
          document.getElementById('username').setCustomValidity('invalid');
          document.querySelector('#username + .invalid-feedback').textContent = username.includes(' ') ? 'Username must not contain spaces.' : 'Please enter your username.';
        } else {
          document.getElementById('username').setCustomValidity('');
        }
        // Perform the validation check
        if (form.checkValidity() === false) {
          form.classList.add('was-validated');
        } else {
          // If all validations pass, submit the form data
          axios.post('/api/auth/signup', {
            fullName: document.getElementById('fullname').value,
            username: document.getElementById('username').value,
            pass_word: document.getElementById('password').value,
          })
          .then(res => {
            console.log(res);
            Toastify({
              text: "Sign up succeeded",
              style: {
                background: "linear-gradient(to right, #198754, #198754)",
              },
              onClick: function(){} // Callback after click
            }).showToast();
            setTimeout(() => {
              window.location.replace("/login");
            }, 1500);
          })
          .catch(err => {
            console.log(err);
            Toastify({
              text: "Sign up failed",
              style: {
                background: "linear-gradient(to right, #dc3545, #dc3545)",
              },
              onClick: function(){} // Callback after click
            }).showToast();
          })
        }
      }, false);
    });
  }, false);
})();
</script>

